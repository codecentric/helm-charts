init:
  image:
    repository: busybox
    tag: 1.31
    pullPolicy: IfNotPresent
  resources: {}
    # limits:
    #   cpu: "10m"
    #   memory: "32Mi"
    # requests:
    #   cpu: "10m"
    #   memory: "32Mi"

clusterDomain: cluster.local

## Optionally override the fully qualified name
# fullnameOverride: keycloak

## Optionally override the name
# nameOverride: keycloak

keycloak:
  replicas: 1

  image:
    repository: jboss/keycloak
    tag: 9.0.2
    pullPolicy: IfNotPresent

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    pullSecrets: []
    # - myRegistrKeySecretName

  hostAliases: []
  #  - ip: "1.2.3.4"
  #    hostnames:
  #      - "my.host.com"

  proxyAddressForwarding: true

  enableServiceLinks: false

  podManagementPolicy: Parallel

  restartPolicy: Always

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name:

  securityContext:
    fsGroup: 1000

  containerSecurityContext:
    runAsUser: 1000
    runAsNonRoot: true

  ## The path keycloak will be served from. To serve keycloak from the root path, use two quotes (e.g. "").
  basepath: auth

  ## Additional init containers, e. g. for providing custom themes
  extraInitContainers: |

  ## Additional sidecar containers, e. g. for a database proxy, such as Google's cloudsql-proxy
  extraContainers: |

  ## lifecycleHooks defines the container lifecycle hooks
  lifecycleHooks: |
    # postStart:
    #   exec:
    #     command: ["/bin/sh", "-c", "ls"]

  ## Override the default for the Keycloak container, e.g. for clusters with large cache that requires rebalancing.
  terminationGracePeriodSeconds: 60

  ## Additional arguments to start command e.g. -Dkeycloak.import= to load a realm
  extraArgs: ""

  ## Username for the initial Keycloak admin user
  username: keycloak

  ## Password for the initial Keycloak admin user. Applicable only if existingSecret is not set.
  ## If not set, a random 10 characters password will be used
  password: ""

  # Specifies an existing secret to be used for the admin password
  existingSecret: ""

  # The key in the existing secret that stores the password
  existingSecretKey: password

  ## jGroups configuration (only for HA deployment)
  jgroups:
    discoveryProtocol: dns.DNS_PING
    discoveryProperties: >
      "dns_query={{ template "keycloak.fullname" . }}-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"

  javaToolOptions: >-
    -XX:+UseContainerSupport
    -XX:MaxRAMPercentage=50.0

  ## Allows the specification of additional environment variables for Keycloak
  extraEnv: |
    # - name: KEYCLOAK_LOGLEVEL
    #   value: DEBUG
    # - name: WILDFLY_LOGLEVEL
    #   value: DEBUG
    # - name: CACHE_OWNERS
    #   value: "2"
    # - name: DB_QUERY_TIMEOUT
    #   value: "60"
    # - name: DB_VALIDATE_ON_MATCH
    #   value: true
    # - name: DB_USE_CAST_FAIL
    #   value: false

  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "keycloak.selectorLabels" . | nindent 10 }}
            matchExpressions:
              - key: role
                operator: NotIn
                values:
                  - test
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "keycloak.selectorLabels" . | nindent 12 }}
              matchExpressions:
                - key: role
                  operator: NotIn
                  values:
                    - test
            topologyKey: failure-domain.beta.kubernetes.io/zone

  nodeSelector: {}
  priorityClassName: ""
  tolerations: []

  ## Additional pod labels
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  podLabels: {}

  ## Extra Annotations to be added to pod
  podAnnotations: {}

  livenessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/
      port: http
    initialDelaySeconds: 300
    timeoutSeconds: 5
  readinessProbe: |
    httpGet:
      path: {{ if ne .Values.keycloak.basepath "" }}/{{ .Values.keycloak.basepath }}{{ end }}/realms/master
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1

  resources: {}
    # limits:
    #   cpu: "100m"
    #   memory: "1024Mi"
    # requests:
    #   cpu: "100m"
    #   memory: "1024Mi"

  x509:
    enabled: false
    certificates:
      tls.crt: |
        -----BEGIN CERTIFICATE-----
        MIIDVDCCAjwCCQCitqucCIlVCDANBgkqhkiG9w0BAQsFADBtMQswCQYDVQQGEwJG
        UjEOMAwGA1UECAwFSXNlcmUxETAPBgNVBAcMCEdyZW5vYmxlMQ8wDQYDVQQKDAZt
        eWNvcnAxDjAMBgNVBAsMBW15b3JnMRowGAYDVQQDDBFjYXJvb3QubXljb3JwLmNv
        bTAeFw0yMDA0MjkxOTA5MzdaFw0yMTA5MTExOTA5MzdaMGsxCzAJBgNVBAYTAkZS
        MQ4wDAYDVQQIDAVJc2VyZTERMA8GA1UEBwwIR3Jlbm9ibGUxDzANBgNVBAoMBm15
        Y29ycDEOMAwGA1UECwwFbXlvcmcxGDAWBgNVBAMMD3g1MDkubXljb3JwLmNvbTCC
        ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANEibVaf7OvyhAiAaX5z2rRm
        YHuWbCg10ds+5oVtzp/Nf1Fz7Yfnm8ZlaX28suffr+381QP4pIWAbShIMd3HKW1N
        9C5UF8tVvr2VYaWcerKqFgurnhP02sTwswFoMrHG5AOM4IDbP5cVBhd+8PalD1Gv
        +b49WLYmkg1dipHOgeaiqlQl0RhR6O3/Z9OH/ju3u0rOFZJTue1aspmwBSPp1FJE
        EVWsNRV4ASyRp84j9Jx5RgZeC6t90Jqou0sOoGu218yhTiwe9hWHJPiGjhhs4PJi
        fspg14AQGecjKGNNHYtU0jxiASk24K89E32QQLXtffbdTujyvhqqEFcKocK1q8UC
        AwEAATANBgkqhkiG9w0BAQsFAAOCAQEAIDyf+pM/sgFS4KmzTtEGFmb1Bt0iwC74
        EA4S/iRXTHsd1SUz1kZFiwfSW3AK7OJLZ4xlsqi9vZYzJw3lgcgP1DGX4pO8gvkw
        2rWvdMNfiUPqfB2chQhYrOIybKGVzAapBQpYIepaaAk/8MGz3IJlsmL5QISfmIXc
        nI+zX4NHHG8WKk0XyomVRMElrz4cvRBXUNt1S0bl9VDga5JrOKfhiJ0LZvHtEt8b
        wdc/cTIkLDrDxkmW37KUpW1eq2nhiMp67DPH6m60MleSXvfQNAYvG1QYkd6LoD6n
        CDrM56jK/BgdLHSzTxQlBhN42Xy4ilmbcI+218KXFix0roP6GXZk/g==
        -----END CERTIFICATE-----
      tls.key: |
        -----BEGIN RSA PRIVATE KEY-----
        MIIEowIBAAKCAQEA0SJtVp/s6/KECIBpfnPatGZge5ZsKDXR2z7mhW3On81/UXPt
        h+ebxmVpfbyy59+v7fzVA/ikhYBtKEgx3ccpbU30LlQXy1W+vZVhpZx6sqoWC6ue
        E/TaxPCzAWgyscbkA4zggNs/lxUGF37w9qUPUa/5vj1YtiaSDV2Kkc6B5qKqVCXR
        GFHo7f9n04f+O7e7Ss4VklO57VqymbAFI+nUUkQRVaw1FXgBLJGnziP0nHlGBl4L
        q33Qmqi7Sw6ga7bXzKFOLB72FYck+IaOGGzg8mJ+ymDXgBAZ5yMoY00di1TSPGIB
        KTbgrz0TfZBAte199t1O6PK+GqoQVwqhwrWrxQIDAQABAoIBAFfKQunFMpiNcl17
        Qk2h5qIqA8B9kaODjDej/PLv+HfetN6FcqXFVQAAnDr7FoL9xIV7yBPlsXKVSb1K
        KRy3OS24NpOoG2Dw+qPs7FOwD1WmzqBRh4dLFvbrL8mcawNzwU24Opn874HFgowk
        bpSrD3Y0D/uLFw1HvbG8nam9bYxZ42tnvCw3Vsm7lKVXjy1PtXOKZS31l5/12WS6
        ocYb4+FMUeZgktoWk1/W/FQaQN3iPpixTiIJwpSPIPbgk2j4YJGhjUF9fivPPk3x
        g28M+EXpx/5B7zjiWIofBSl/noxurnpnPU58A2MlRqrKbuLFwKRDo5zEItHllEey
        w0ccvsECgYEA/PZ6rTwUt2PQOFt8YH+Cy+Cn+hXt8Hm05RtZnufELEIm85eBNd4L
        /o9sF29D7Wo4rGxeHvp6VK5tTpBCJ/88RtWAplhWq+LDe09bFCyNDEVawGCNL5M6
        vQcTyJirwR7g/6hC2XVvlUDu3b3kut9pMkqFPWO4+swC67oRIfwiyBECgYEA06U8
        Ezto2rEuAAfnizDXYZk3gtGZhPMlOiWcTlAxqRgWKclsTMVE27RJLI0UhR2Cd97E
        bXvfJA77KC+wDvX+2Kwkzovo+TOZEi1OyV/q914OGalWKykSNOeCKZ7B7ewCHwC3
        zZUTvUyYZOObPc2dao69s+xZnnntr3S83/dofHUCgYBqdVzJnThmubX+kdn1TpSA
        Muren+4EP2Q261y7OHTh33E/IOq6/dj0Z+2oqyXeO87gGbc+uFFVZBcScjm1VYBL
        mzzKRPEs44E7WvlMszclC+cWgUvJ0t9sgBb+W+okm1c7oNeJZxfvq2UbovgpAS7n
        gF80p8xImCU+iY7+S3tj0QKBgHxVAWm66OowU/moqxlV4/Ft9PJg93Lm8+Oo3J4U
        9leD0uFRdtHSwZTf4GzPpFJe95o7v+EheADS3DDLcv4W/VOELUs5Xe+npDDNdQ9P
        zdTr6BSjKf/I7O0vY4PXw81lbAmSfmfDQAlgydXa8APqmqNSn5bnLe6vajY8ughI
        a5VRAoGBAMVwgpT/34A77GBNqx45g1N2/U4du0uC67SqnZlgj9oPZtJQswbU659B
        sPZOP6mLwhTgLm54asnk1Zy4JeAZ8W7zX9H8ebhJet2jw+qEuVvORTepNW530wPW
        pXIoS7evFhQ1TDzQre5m23Q8DoSFLDncRQ+ceCXx1h0sJisqkKwP
        -----END RSA PRIVATE KEY-----
      ca.crt: |
        -----BEGIN CERTIFICATE-----
        MIIDrTCCApWgAwIBAgIJAKVDdnCOaSFxMA0GCSqGSIb3DQEBCwUAMG0xCzAJBgNV
        BAYTAkZSMQ4wDAYDVQQIDAVJc2VyZTERMA8GA1UEBwwIR3Jlbm9ibGUxDzANBgNV
        BAoMBm15Y29ycDEOMAwGA1UECwwFbXlvcmcxGjAYBgNVBAMMEWNhcm9vdC5teWNv
        cnAuY29tMB4XDTIwMDQyOTE3MjkwNFoXDTIzMDIxNzE3MjkwNFowbTELMAkGA1UE
        BhMCRlIxDjAMBgNVBAgMBUlzZXJlMREwDwYDVQQHDAhHcmVub2JsZTEPMA0GA1UE
        CgwGbXljb3JwMQ4wDAYDVQQLDAVteW9yZzEaMBgGA1UEAwwRY2Fyb290Lm15Y29y
        cC5jb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC4N53quAX21oo1
        /E2KTBWj1BoOSPZt76c0rXmxM0tdzu8ejixKomW88BqO5YoMEobw1MP1I4yNp8yv
        g8n7xMTYEYzN2ki1m8pE/nKwZim6qMCgwpJDgzPnCzfpMcGXdpWC9XNO1FXyUWlz
        GDXJdGyMoH5tgnbvh5sS+fy1V9MUzxBrYSL3gXpLl4V1whkeNT9srj0qNPb/qqCz
        03VIaGFeNuoBGzzv1V1X4nfM4641JVC4trHaKbkxGQpTuhzAXC1E5s9mANG1XSmJ
        BPvj+lYnZHwFPZjtx8qyT7oLv189c/oMaxHz5KnWOGlgaj9KsPXZqOs5dfTpp7FL
        E8X0t4p/AgMBAAGjUDBOMB0GA1UdDgQWBBQW8EI0ekTLovXoyLR8/5VHWrl/VTAf
        BgNVHSMEGDAWgBQW8EI0ekTLovXoyLR8/5VHWrl/VTAMBgNVHRMEBTADAQH/MA0G
        CSqGSIb3DQEBCwUAA4IBAQBcjMO5+SlTvvXOpcTJCBpCDvFnUvRSP11eQYrjDrgb
        veYL4dwR9/hmNz7ZmIagJUEfVn54iVNNcnK14yLzizDqBRY0so4UueTIW1cdKjT/
        q6IXmi9NLex7hVSZD9UkgTP9TGm9tj6HPGDO3STU6OMB1f4HflIG5Qk7WzhGZF+Q
        zEB/ier7gd1ZJ24rdi5Q3FEsZXUIJVAfNLwCPS4J7NeLjPH85X1wzFuzQgTPtfIa
        ux/hGzrvOJSV6pKuRcgTPbVoVDOJmr8BlgzZHwJ+X2p5VLEBPTYAOVVaR79dmCl9
        g0xkN/ukbpmmMBLC6524JQtOMClBUcu+ScRhutHIJ8ZF
        -----END CERTIFICATE-----



  ## WildFly CLI configurations. They all end up in the file 'keycloak.cli' configured in the configmap which is
  ## executed on server startup.
  cli:
    enabled: true
    nodeIdentifier: |
      {{ .Files.Get "scripts/node-identifier.cli" }}

    logging: |
      {{ .Files.Get "scripts/logging.cli" }}

    ha: |
      {{ .Files.Get "scripts/ha.cli" }}

    datasource: |
      {{ .Files.Get "scripts/datasource.cli" }}

    x509: |
      /subsystem=keycloak-server/spi=x509cert-lookup:write-attribute(name=default-provider, value="nginx")
      /subsystem=keycloak-server/spi=x509cert-lookup/provider=default:remove
      /subsystem=keycloak-server/spi=x509cert-lookup/provider=nginx:add(enabled=true,properties={sslClientCert => "ssl-client-cert", sslCertChainPrefix => "USELESS",     certificateChainLength => "2"})

    # Custom CLI script
    custom: |

  ## Custom startup scripts to run before Keycloak starts up
  startupScripts: {}
    # mystartup.sh: |
    #   #!/bin/sh
    #
    #   echo 'Hello from my custom startup script!'

  ## Add additional volumes and mounts, e. g. for custom themes
  extraVolumes: |
  extraVolumeMounts: |

  ## Add additional ports, eg. for custom admin console
  extraPorts: |

  podDisruptionBudget: {}
    # maxUnavailable: 1
    # minAvailable: 1

  ## Extra annotations to be added to statefulset
  statefulsetAnnotations: {}

  service:
    annotations: {}
    # service.beta.kubernetes.io/aws-load-balancer-internal: "0.0.0.0/0"

    labels: {}
    # key: value

    ## ServiceType
    ## ref: https://kubernetes.io/docs/user-guide/services/#publishing-services---service-types
    type: ClusterIP

    ## Optional static port assignment for service type NodePort.
    # nodePort: 30000

    httpPort: 80
    httpNodePort: ""

    httpsPort: 8443
    httpsNodePort: ""

    # Optional: jGroups port for high availability clustering
    jgroupsPort: 7600

    ## Add additional ports, eg. for custom admin console
    extraPorts: |

  ## Ingress configuration.
  ## ref: https://kubernetes.io/docs/user-guide/ingress/
  ingress:
    enabled: false
    path: /

    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # ingress.kubernetes.io/affinity: cookie
      # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # nginx.ingress.kubernetes.io/proxy-ssl-secret: "namespace/release-name-x509-secret"
      # nginx.ingress.kubernetes.io/proxy-ssl-verify: "on"
      # nginx.ingress.kubernetes.io/proxy-ssl-verify-depth: "2"
      # nginx.ingress.kubernetes.io/auth-tls-secret: "namespace/release-name-x509-secret"
      # nginx.ingress.kubernetes.io/auth-tls-verify-client: "optional"
      # nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
      # nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"

      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      # ingress.kubernetes.io/affinity: cookie

    labels: {}
    # key: value

    ## List of hosts for the ingress
    hosts:
      - keycloak.example.com

    ## TLS configuration
    tls: []
    # - hosts:
    #     - keycloak.example.com
    #   secretName: tls-keycloak

  ## OpenShift route configuration.
  ## ref: https://docs.openshift.com/container-platform/3.11/architecture/networking/routes.html
  route:
    enabled: false
    path: /

    annotations: {}
      # kubernetes.io/tls-acme: "true"
      # haproxy.router.openshift.io/disable_cookies: "true"
      # haproxy.router.openshift.io/balance: roundrobin

    labels: {}
      # key: value

    # Host name for the route
    host:

    # TLS configuration
    tls:
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge

  ## Persistence configuration
  persistence:
    # If true, the Postgres chart is deployed
    deployPostgres: false

    # The database vendor. Can be either "postgres", "mysql", "mariadb", or "h2"
    dbVendor: h2

    ## The following values only apply if "deployPostgres" is set to "false"
    dbName: keycloak
    dbHost: mykeycloak
    dbPort: 5432

    ## Database Credentials are loaded from a Secret residing in the same Namespace as keycloak.
    ## The Chart can read credentials from an existing Secret OR it can provision its own Secret.

    ## Specify existing Secret
    # If set, specifies the Name of an existing Secret to read db credentials from.
    existingSecret: ""
    existingSecretPasswordKey: ""  # read keycloak db password from existingSecret under this Key
    existingSecretUsernameKey: ""  # read keycloak db user from existingSecret under this Key

    ## Provision new Secret
    # Only used if existingSecret is not specified. In this case a new secret is created
    # populated by the variables below.
    dbUser: keycloak
    dbPassword: ""

postgresql:
  ### PostgreSQL User to create.
  ##
  postgresqlUsername: keycloak

  ## PostgreSQL Password for the new user.
  ## If not set, a random 10 characters password will be used.
  ##
  postgresqlPassword: ""

  ## PostgreSQL Database to create.
  ##
  postgresqlDatabase: keycloak

  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  ##
  persistence:
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    ##
    enabled: false

test:
  enabled: true
  image:
    repository: unguiculus/docker-python3-phantomjs-selenium
    tag: v1
    pullPolicy: IfNotPresent
  securityContext:
    fsGroup: 1000
  containerSecurityContext:
    runAsUser: 1000
    runAsNonRoot: true

prometheus:
  operator:
    ## Are you using Prometheus Operator?
    enabled: false

    serviceMonitor:
      ## Optionally set a target namespace in which to deploy serviceMonitor
      namespace: ""

      ## Additional labels to add to the ServiceMonitor so it is picked up by the operator.
      ## If using the [Helm Chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator) this is the name of the Helm release.
      selector:
        release: prometheus

      ## Interval at which Prometheus scrapes metrics
      interval: 10s

      ## Timeout at which Prometheus timeouts scrape run
      scrapeTimeout: 10s

      ## The path to scrape
      path: /auth/realms/master/metrics

    prometheusRules:
      ## Add Prometheus Rules?
      enabled: false

      ## Additional labels to add to the PrometheusRule so it is picked up by the operator.
      ## If using the [Helm Chart](https://github.com/helm/charts/tree/master/stable/prometheus-operator) this is the name of the Helm release and 'app: prometheus-operator'
      selector:
        app: prometheus-operator
        release: prometheus

      ## Some example rules.
      rules: {}
      #  - alert: keycloak-IngressHigh5xxRate
      #    annotations:
      #      message: The percentage of 5xx errors for keycloak over the last 5 minutes is over 1%.
      #    expr: (sum(rate(nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak",status=~"5[0-9]{2}"}[1m]))/sum(rate(nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak"}[1m])))*100 > 1
      #    for: 5m
      #    labels:
      #      severity: warning
      #  - alert: keycloak-IngressHigh5xxRate
      #    annotations:
      #      message: The percentage of 5xx errors for keycloak over the last 5 minutes is over 5%.
      #    expr: (sum(rate(nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak",status=~"5[0-9]{2}"}[1m]))/sum(rate(nginx_ingress_controller_response_duration_seconds_count{exported_namespace="mynamespace",ingress="mynamespace-keycloak"}[1m])))*100 > 5
      #    for: 5m
      #    labels:
      #      severity: critical
